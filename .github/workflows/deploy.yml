name: Build, push, and deploy

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main
  release:
    types:
      - created

env:
  TEST_PROJECT_KEY: ${{ secrets.TEST_PROJECT_KEY }}
  IMAGE: docker.pkg.github.com/${{ github.repository }}/${{ github.event.repository.name }}:${{ github.sha }}

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#        with:
#          install: true

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install Node Modules
        run: npm ci --ignore-scripts --no-optional --prefer-offline --no-audit

      - name: Prep Test Environment
        run: mkdir -p secrets && npm run ensure-test-features

      - name: Set up Docker Compose # Can bring up kafka and other containers
        run: npm run all-up

      - name: Run Unit Tests # Running unit tests
        run: npm test

      - name: Run Blackbox Tests # Running test against the docker image
        run: npm run blackbox

      - name: Tag image from Docker Compose
        run: |
          docker tag amplitude-proxy_server ${IMAGE}

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${IMAGE}

  # Deployer til labs-gcp på alle merges til master
  deploy-labs-gcp:
    name: Deploy to nais labs-gcp
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name != 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: labs-gcp
          RESOURCE: .nais/labs-gcp.yaml


  # Deployer til dev-gcp på alle merges til main
  deploy-dev-gcp:
    name: Deploy to nais dev-gcp
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name != 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/dev-gcp.yaml

  # Deployer til Prod-GCP på "release" fra github
  deploy-prod-gcp:
    name: Deploy to nais prod-gcp
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/prod-gcp.yaml
      - name: deploy alerts to prod-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/alerts.yaml
